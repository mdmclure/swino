["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$schema.spec.variant","~:imports",null,"~:requires",["^ ","~$utils","~$schema.utils","^:","^:","~$spec","~$schema.spec.core","^<","^<"],"~:uses",null,"~:defs",["^ ","~$option-step",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/variant.cljs","~:line",12,"~:column",8,"~:end-line",12,"~:end-column",19,"~:private",true,"~:arglists",["~#list",["~$quote",["^I",[["~$o","~$params","~$else"]]]]]],"^G",true,"^5","~$schema.spec.variant/option-step","~:variadic",false,"^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/variant.cljs","^F",19,"~:method-params",["^I",[["~$o","^K","^L"]]],"~:protocol-impl",null,"~:arglists-meta",["^I",[null,null]],"^D",1,"^C",12,"^E",12,"~:max-fixed-arity",3,"~:fn-var",true,"^H",["^I",["^J",["^I",[["~$o","^K","^L"]]]]]],"~$VariantSpec",["^ ","~:num-fields",4,"~:protocols",["^4",["~$cljs.core/IRecord","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$schema.spec.core/CoreSpec","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^5","~$schema.spec.variant/VariantSpec","^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/variant.cljs","^F",23,"~:type",true,"^D",12,"~:internal-ctor",true,"^C",41,"~:record",true,"^E",41,"~:skip-protocol-flag",["^4",["^W","^X","^Y","^Z","^[","^11","^12","^13","^14","^16","^17","^18","^19"]]],"~$->VariantSpec",["^ ","^@",null,"^A",["^ ","^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/variant.cljs","^C",41,"^D",12,"^E",41,"^F",23,"^1<",true,"~:factory","~:positional","^H",["^I",["^J",["^I",[["~$pre","~$options","~$err-f","~$post"]]]]]],"^5","~$schema.spec.variant/->VariantSpec","^N",false,"^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/variant.cljs","^F",23,"^O",["^I",[["^1B","^1C","^1D","^1E"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^1<",true,"^1@","^1A","^C",41,"^E",41,"^R",4,"^S",true,"^H",["^I",["^J",["^I",[["^1B","^1C","^1D","^1E"]]]]]],"~$map->VariantSpec",["^ ","^@",null,"^A",["^ ","^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/variant.cljs","^C",41,"^D",12,"^E",41,"^F",23,"^1<",true,"^1@","~:map","^H",["^I",["^J",["^I",[["~$G__23516"]]]]]],"^5","~$schema.spec.variant/map->VariantSpec","^N",false,"^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/variant.cljs","^F",23,"^O",["^I",[["^1I"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^1<",true,"^1@","^1H","^C",41,"^E",41,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["^1I"]]]]]],"~$variant-spec",["^ ","^@",null,"^A",["^ ","^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/variant.cljs","^C",61,"^D",7,"^E",61,"^F",19,"^H",["^I",["^J",["^I",[["^1B","^1C"],["^1B","^1C","^1D"],["^1B","^1C","^1D","^1E"]]]]],"~:doc","A variant spec represents a choice between a set of alternative\n   subschemas, e.g., a tagged union. It has an overall precondition,\n   set of options, and error function.\n\n   The semantics of `options` is that the options are processed in\n   order. During checking, the datum must match the schema for the\n   first option for which `guard` passes. During generation, any datum\n   generated from an option will pass the corresponding `guard`.\n\n   err-f is a function to produce an error message if none\n   of the guards match (and must be passed unless the last option has no\n   guard).","~:top-fn",["^ ","^N",false,"^R",4,"^O",["^I",[["^1B","^1C"],["^1B","^1C","^1D"],["^1B","^1C","^1D","^1E"]]],"^H",["^I",[["^1B","^1C"],["^1B","^1C","^1D"],["^1B","^1C","^1D","^1E"]]],"^Q",["^I",[null,null,null]]]],"^5","~$schema.spec.variant/variant-spec","^N",false,"^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/variant.cljs","^F",19,"^1M",["^ ","^N",false,"^R",4,"^O",["^I",[["^1B","^1C"],["^1B","^1C","^1D"],["^1B","^1C","^1D","^1E"]]],"^H",["^I",[["^1B","^1C"],["^1B","^1C","^1D"],["^1B","^1C","^1D","^1E"]]],"^Q",["^I",[null,null,null]]],"^O",["^I",[["^1B","^1C"],["^1B","^1C","^1D"],["^1B","^1C","^1D","^1E"]]],"^P",null,"^Q",["^I",[null,null,null]],"^D",1,"^C",61,"^E",61,"^R",4,"^S",true,"^H",["^I",[["^1B","^1C"],["^1B","^1C","^1D"],["^1B","^1C","^1D","^1E"]]],"^1L","A variant spec represents a choice between a set of alternative\n   subschemas, e.g., a tagged union. It has an overall precondition,\n   set of options, and error function.\n\n   The semantics of `options` is that the options are processed in\n   order. During checking, the datum must match the schema for the\n   first option for which `guard` passes. During generation, any datum\n   generated from an option will pass the corresponding `guard`.\n\n   err-f is a function to produce an error message if none\n   of the guards match (and must be passed unless the last option has no\n   guard)."]],"~:require-macros",["^ ","~$macros","~$schema.macros","^1Q","^1Q","^9","^:","^:","^:"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["^1C","~:schema","~:return-walked?","~$throws?","~:pre","~:else","~:wrap-error","^1B","~:err-f","^1D","~:schema.spec.variant/exception","~:post","~:options","~:guard","^1E"]],"~:order",["^22","^1[","^1X","^1T","^1V","^1Y","^1U","^1W","^21","^1Z","^20","^1B","^1C","^1D","^1E"]],"^1L",null]