["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$print.foo","~:imports",null,"~:requires",["^ ","~$str","~$clojure.string","^:","^:","~$pp","~$cljs.pprint","^<","^<"],"~:uses",null,"~:defs",["^ ","~$get-miliseconds",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","file:/C:/Users/Matt/.m2/repository/print-foo-cljs/print-foo-cljs/2.0.0/print-foo-cljs-2.0.0.jar!/print/foo.cljc","~:line",133,"~:column",7,"~:end-line",133,"~:end-column",22,"~:arglists",["~#list",["~$quote",["^H",[[]]]]]],"^5","~$print.foo/get-miliseconds","~:variadic",false,"^B","file:/C:/Users/Matt/.m2/repository/print-foo-cljs/print-foo-cljs/2.0.0/print-foo-cljs-2.0.0.jar!/print/foo.cljc","^F",22,"~:method-params",["^H",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^H",[null,null]],"^D",1,"^C",133,"^E",133,"~:max-fixed-arity",0,"~:fn-var",true,"^G",["^H",["^I",["^H",[[]]]]]],"~$parse-list",["^ ","^5","~$print.foo/parse-list","^B","file:/C:/Users/Matt/.m2/repository/print-foo-cljs/print-foo-cljs/2.0.0/print-foo-cljs-2.0.0.jar!/print/foo.cljc","^C",64,"^D",1,"^E",64,"^F",21,"^A",["^ ","^B","file:/C:/Users/Matt/.m2/repository/print-foo-cljs/print-foo-cljs/2.0.0/print-foo-cljs-2.0.0.jar!/print/foo.cljc","^C",64,"^D",11,"^E",64,"^F",21]],"~$resolves-to-fn?",["^ ","^@",null,"^A",["^ ","^B","file:/C:/Users/Matt/.m2/repository/print-foo-cljs/print-foo-cljs/2.0.0/print-foo-cljs-2.0.0.jar!/print/foo.cljc","^C",50,"^D",17,"^E",50,"^F",32,"~:private",true,"^G",["^H",["^I",["^H",[["~$x"]]]]]],"^T",true,"^5","~$print.foo/resolves-to-fn?","^K",false,"^B","file:/C:/Users/Matt/.m2/repository/print-foo-cljs/print-foo-cljs/2.0.0/print-foo-cljs-2.0.0.jar!/print/foo.cljc","^F",32,"^L",["^H",[["~$x"]]],"^M",null,"^N",["^H",[null,null]],"^D",1,"^C",50,"^E",50,"^O",1,"^P",true,"^G",["^H",["^I",["^H",[["~$x"]]]]]],"~$tap",["^ ","^5","~$print.foo/tap","^B","file:/C:/Users/Matt/.m2/repository/print-foo-cljs/print-foo-cljs/2.0.0/print-foo-cljs-2.0.0.jar!/print/foo.cljc","^C",46,"^D",1,"^E",46,"^F",9,"^A",["^ ","^B","file:/C:/Users/Matt/.m2/repository/print-foo-cljs/print-foo-cljs/2.0.0/print-foo-cljs-2.0.0.jar!/print/foo.cljc","^C",46,"^D",6,"^E",46,"^F",9],"~:doc","Quicker-to-type version of `print-and-return` with \" *** \" appended to the front"],"~$expand-arg",["^ ","^@",null,"^A",["^ ","^B","file:/C:/Users/Matt/.m2/repository/print-foo-cljs/print-foo-cljs/2.0.0/print-foo-cljs-2.0.0.jar!/print/foo.cljc","^C",32,"^D",17,"^E",32,"^F",27,"^T",true,"^G",["^H",["^I",["^H",[["~$arg"]]]]]],"^T",true,"^5","~$print.foo/expand-arg","^K",false,"^B","file:/C:/Users/Matt/.m2/repository/print-foo-cljs/print-foo-cljs/2.0.0/print-foo-cljs-2.0.0.jar!/print/foo.cljc","^F",27,"^L",["^H",[["^Z"]]],"^M",null,"^N",["^H",[null,null]],"^D",1,"^C",32,"^E",32,"^O",1,"^P",true,"^G",["^H",["^I",["^H",[["^Z"]]]]]],"~$interleave-middlewares",["^ ","^@",null,"^A",["^ ","^B","file:/C:/Users/Matt/.m2/repository/print-foo-cljs/print-foo-cljs/2.0.0/print-foo-cljs-2.0.0.jar!/print/foo.cljc","^C",162,"^D",17,"^E",162,"^F",39,"^T",true,"^G",["^H",["^I",["^H",[["~$handler","~$middlewares",["^ ","~:keys",["~$get-in","~$timings?"],"~:or",["^ ","^14",[],"^15",false]]]]]]]],"^T",true,"^5","~$print.foo/interleave-middlewares","^K",false,"^B","file:/C:/Users/Matt/.m2/repository/print-foo-cljs/print-foo-cljs/2.0.0/print-foo-cljs-2.0.0.jar!/print/foo.cljc","^F",39,"^L",["^H",[["^11","^12","~$p__31088"]]],"^M",null,"^N",["^H",[null,null]],"^D",1,"^C",162,"^E",162,"^O",3,"^P",true,"^G",["^H",["^I",["^H",[["^11","^12",["^ ","^13",["^14","^15"],"^16",["^ ","^14",[],"^15",false]]]]]]]],"~$wrap-middleware-debugging",["^ ","^@",null,"^A",["^ ","^B","file:/C:/Users/Matt/.m2/repository/print-foo-cljs/print-foo-cljs/2.0.0/print-foo-cljs-2.0.0.jar!/print/foo.cljc","^C",137,"^D",7,"^E",137,"^F",32,"^G",["^H",["^I",["^H",[["^11","~$middleware-name",["^ ","^13",["^14","~$summarize?","^15"],"^16",["^ ","^14",[],"^1;",true,"^15",false]]]]]]]],"^5","~$print.foo/wrap-middleware-debugging","^K",false,"^B","file:/C:/Users/Matt/.m2/repository/print-foo-cljs/print-foo-cljs/2.0.0/print-foo-cljs-2.0.0.jar!/print/foo.cljc","^F",32,"^L",["^H",[["^11","^1:","~$p__31081"]]],"^M",null,"^N",["^H",[null,null]],"^D",1,"^C",137,"^E",137,"^O",3,"^P",true,"^G",["^H",["^I",["^H",[["^11","^1:",["^ ","^13",["^14","^1;","^15"],"^16",["^ ","^14",[],"^1;",true,"^15",false]]]]]]]],"~$parse-item",["^ ","^5","~$print.foo/parse-item","^B","file:/C:/Users/Matt/.m2/repository/print-foo-cljs/print-foo-cljs/2.0.0/print-foo-cljs-2.0.0.jar!/print/foo.cljc","^C",54,"^D",1,"^E",54,"^F",21,"^A",["^ ","^B","file:/C:/Users/Matt/.m2/repository/print-foo-cljs/print-foo-cljs/2.0.0/print-foo-cljs-2.0.0.jar!/print/foo.cljc","^C",54,"^D",11,"^E",54,"^F",21]],"~$single-destructuring-arg->form+name",["^ ","^@",null,"^A",["^ ","^B","file:/C:/Users/Matt/.m2/repository/print-foo-cljs/print-foo-cljs/2.0.0/print-foo-cljs-2.0.0.jar!/print/foo.cljc","^C",10,"^D",17,"^E",10,"^F",52,"^T",true,"^G",["^H",["^I",["^H",[["~$arg-form"]]]]],"^X","Turns any one binding arg (which may be a destructuring binding) into a vector\n  where the left elem is the arg with a possible :as added to it.\n  And the rght side is the symbol referring to the arg itself."],"^T",true,"^5","~$print.foo/single-destructuring-arg->form+name","^K",false,"^B","file:/C:/Users/Matt/.m2/repository/print-foo-cljs/print-foo-cljs/2.0.0/print-foo-cljs-2.0.0.jar!/print/foo.cljc","^F",52,"^L",["^H",[["^1A"]]],"^M",null,"^N",["^H",[null,null]],"^D",1,"^C",10,"^E",10,"^O",1,"^P",true,"^G",["^H",["^I",["^H",[["^1A"]]]]],"^X","Turns any one binding arg (which may be a destructuring binding) into a vector\n  where the left elem is the arg with a possible :as added to it.\n  And the rght side is the symbol referring to the arg itself."],"~$print-and-return",["^ ","^@",null,"^A",["^ ","^B","file:/C:/Users/Matt/.m2/repository/print-foo-cljs/print-foo-cljs/2.0.0/print-foo-cljs-2.0.0.jar!/print/foo.cljc","^C",37,"^D",7,"^E",37,"^F",23,"^G",["^H",["^I",["^H",[["~$&","~$xs"]]]]],"^X","Diagnostic tool for printing the result of evaluating an s-expression.\n   Any initial args over 1, are printed as strings, and generally used as a label.","~:top-fn",["^ ","^K",true,"^O",0,"^L",[["^H",["^1D"]]],"^G",["^H",[["~$&","^1D"]]],"^N",["^H",[null]]]],"^5","~$print.foo/print-and-return","^K",true,"^B","file:/C:/Users/Matt/.m2/repository/print-foo-cljs/print-foo-cljs/2.0.0/print-foo-cljs-2.0.0.jar!/print/foo.cljc","^F",23,"^1E",["^ ","^K",true,"^O",0,"^L",[["^H",["^1D"]]],"^G",["^H",[["~$&","^1D"]]],"^N",["^H",[null]]],"^L",[["^H",["^1D"]]],"^M",null,"^N",["^H",[null]],"^D",1,"^C",37,"^E",37,"^O",0,"^P",true,"^G",["^H",[["~$&","^1D"]]],"^X","Diagnostic tool for printing the result of evaluating an s-expression.\n   Any initial args over 1, are printed as strings, and generally used as a label."]],"~:require-macros",["^ ","^;","^<","^<","^<"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~$cond->>","~$print.foo/print-cond->>","~$print.foo/print-let","~$print.foo/print-defn","~$print.foo/print-cond->","~$symbol-for-destructured-arg","~$print.foo/print-if","~:else","~$cljs.core/->","~:print.foo/timings","~:default","~:as","~$let","~$->","~$print.foo/print-defn-","~$print.foo/print->","~$print.foo/print->>","~:summarize?","~:vector","~$defn","~$if","~:middleware-elapsed","~:sym","~:middleware","~$cljs.core/cond","^1<","~$cond->","~:list","~$defn-","~:middleware-timings","~$cond","~:get-in","^I","~:set","~:hierarchy","^1F","~:map","~:timings?","~$->>"]],"~:order",["^1O","^1U","^1Q","^2>","^28","^20","^2=","^2?","^24","^1T","^1F","^I","^1W","^1Y","^2A","^1Z","^27","^1N","^1J","^1K","^1V","^1L","^22","^1P","^2;","^26","^21","^1M","^29","^1X","^2<","^1[","^2@","^1S","^25","^23","^2:","^1<","^1R"]],"^X","Macros for printing diagnostic information while debugging or developing."]