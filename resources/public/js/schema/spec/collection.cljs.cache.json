["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$schema.spec.collection","~:imports",null,"~:requires",["^ ","~$utils","~$schema.utils","^:","^:","~$spec","~$schema.spec.core","^<","^<"],"~:uses",null,"~:defs",["^ ","~$sequence-transformer",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/collection.cljs","~:line",40,"~:column",8,"~:end-line",40,"~:end-column",28,"~:private",true,"~:arglists",["~#list",["~$quote",["^I",[["~$elts","~$params","~$then"]]]]]],"^G",true,"^5","~$schema.spec.collection/sequence-transformer","~:variadic",false,"^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/collection.cljs","^F",28,"~:method-params",["^I",[["^K","^L","^M"]]],"~:protocol-impl",null,"~:arglists-meta",["^I",[null,null]],"^D",1,"^C",40,"^E",40,"~:max-fixed-arity",3,"~:fn-var",true,"^H",["^I",["^J",["^I",[["^K","^L","^M"]]]]]],"~$optional-tail",["^ ","^@",null,"^A",["^ ","^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/collection.cljs","^C",139,"^D",7,"^E",139,"^F",20,"^H",["^I",["^J",["^I",[["~$schema","~$parser","~$more"]]]]]],"^5","~$schema.spec.collection/optional-tail","^O",false,"^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/collection.cljs","^F",20,"^P",["^I",[["^V","^W","^X"]]],"^Q",null,"^R",["^I",[null,null]],"^D",1,"^C",139,"^E",139,"^S",3,"^T",true,"^H",["^I",["^J",["^I",[["^V","^W","^X"]]]]]],"~$->CollectionSpec",["^ ","^@",null,"^A",["^ ","^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/collection.cljs","^C",70,"^D",12,"^E",70,"^F",26,"~:internal-ctor",true,"~:factory","~:positional","^H",["^I",["^J",["^I",[["~$pre","~$constructor","~$elements","~$on-error"]]]]]],"^5","~$schema.spec.collection/->CollectionSpec","^O",false,"^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/collection.cljs","^F",26,"^P",["^I",[["^12","^13","^14","^15"]]],"^Q",null,"^R",["^I",[null,null]],"^D",1,"^[",true,"^10","^11","^C",70,"^E",70,"^S",4,"^T",true,"^H",["^I",["^J",["^I",[["^12","^13","^14","^15"]]]]]],"~$map->CollectionSpec",["^ ","^@",null,"^A",["^ ","^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/collection.cljs","^C",70,"^D",12,"^E",70,"^F",26,"^[",true,"^10","~:map","^H",["^I",["^J",["^I",[["~$G__23506"]]]]]],"^5","~$schema.spec.collection/map->CollectionSpec","^O",false,"^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/collection.cljs","^F",26,"^P",["^I",[["^19"]]],"^Q",null,"^R",["^I",[null,null]],"^D",1,"^[",true,"^10","^18","^C",70,"^E",70,"^S",1,"^T",true,"^H",["^I",["^J",["^I",[["^19"]]]]]],"~$remaining",["^ ","^@",null,"^A",["^ ","^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/collection.cljs","^C",118,"^D",7,"^E",118,"^F",16,"^H",["^I",["^J",["^I",[["~$s"]]]]],"~:doc","All remaining elements must match schema s"],"^5","~$schema.spec.collection/remaining","^O",false,"^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/collection.cljs","^F",16,"^P",["^I",[["~$s"]]],"^Q",null,"^R",["^I",[null,null]],"^D",1,"^C",118,"^E",118,"^S",1,"^T",true,"^H",["^I",["^J",["^I",[["~$s"]]]]],"^1<","All remaining elements must match schema s"],"~$has-error?",["^ ","^@",null,"^A",["^ ","^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/collection.cljs","^C",60,"^D",8,"^E",60,"^F",18,"^G",true,"^H",["^I",["^J",["^I",[["~$l"]]]]]],"^G",true,"^5","~$schema.spec.collection/has-error?","^O",false,"^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/collection.cljs","^F",18,"^P",["^I",[["~$l"]]],"^Q",null,"^R",["^I",[null,null]],"^D",1,"^C",60,"^E",60,"^S",1,"^T",true,"^H",["^I",["^J",["^I",[["~$l"]]]]]],"~$element-transformer",["^ ","^@",null,"^A",["^ ","^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/collection.cljs","^C",16,"^D",8,"^E",16,"^F",27,"^G",true,"^H",["^I",["^J",["^I",[["~$e","^L","^M"]]]]]],"^G",true,"^5","~$schema.spec.collection/element-transformer","^O",false,"^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/collection.cljs","^F",27,"^P",["^I",[["~$e","^L","^M"]]],"^Q",null,"^R",["^I",[null,null]],"^D",1,"^C",16,"^E",16,"^S",3,"^T",true,"^H",["^I",["^J",["^I",[["~$e","^L","^M"]]]]]],"~$CollectionSpec",["^ ","~:num-fields",4,"~:protocols",["^4",["~$cljs.core/IRecord","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$schema.spec.core/CoreSpec","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^5","~$schema.spec.collection/CollectionSpec","^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/collection.cljs","^F",26,"~:type",true,"^D",12,"^[",true,"^C",70,"~:record",true,"^E",70,"~:skip-protocol-flag",["^4",["^1E","^1F","^1G","^1H","^1I","^1K","^1L","^1M","^1N","^1P","^1Q","^1R","^1S"]]],"~$one-element",["^ ","^@",null,"^A",["^ ","^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/collection.cljs","^C",133,"^D",7,"^E",133,"^F",18,"^H",["^I",["^J",["^I",[["~$required?","^V","^W"]]]]]],"^5","~$schema.spec.collection/one-element","^O",false,"^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/collection.cljs","^F",18,"^P",["^I",[["^1Y","^V","^W"]]],"^Q",null,"^R",["^I",[null,null]],"^D",1,"^C",133,"^E",133,"^S",3,"^T",true,"^H",["^I",["^J",["^I",[["^1Y","^V","^W"]]]]]],"~$optional",["^ ","^@",null,"^A",["^ ","^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/collection.cljs","^C",123,"^D",7,"^E",123,"^F",15,"^H",["^I",["^J",["^I",[["~$&","~$ss"]]]]],"^1<","If any more elements are present, they must match the elements in 'ss'","~:top-fn",["^ ","^O",true,"^S",0,"^P",[["^I",["^20"]]],"^H",["^I",[["~$&","^20"]]],"^R",["^I",[null]]]],"^5","~$schema.spec.collection/optional","^O",true,"^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/collection.cljs","^F",15,"^21",["^ ","^O",true,"^S",0,"^P",[["^I",["^20"]]],"^H",["^I",[["~$&","^20"]]],"^R",["^I",[null]]],"^P",[["^I",["^20"]]],"^Q",null,"^R",["^I",[null]],"^D",1,"^C",123,"^E",123,"^S",0,"^T",true,"^H",["^I",[["~$&","^20"]]],"^1<","If any more elements are present, they must match the elements in 'ss'"],"~$subschemas",["^ ","^@",null,"^A",["^ ","^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/collection.cljs","^C",63,"^D",7,"^E",63,"^F",17,"^H",["^I",["^J",["^I",[["~$elt"]]]]]],"^5","~$schema.spec.collection/subschemas","^O",false,"^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/collection.cljs","^F",17,"^P",["^I",[["^24"]]],"^Q",null,"^R",["^I",[null,null]],"^D",1,"^C",63,"^E",63,"^S",1,"^T",true,"^H",["^I",["^J",["^I",[["^24"]]]]]],"~$all-elements",["^ ","^@",null,"^A",["^ ","^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/collection.cljs","^C",128,"^D",7,"^E",128,"^F",19,"^H",["^I",["^J",["^I",[["^V"]]]]]],"^5","~$schema.spec.collection/all-elements","^O",false,"^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/collection.cljs","^F",19,"^P",["^I",[["^V"]]],"^Q",null,"^R",["^I",[null,null]],"^D",1,"^C",128,"^E",128,"^S",1,"^T",true,"^H",["^I",["^J",["^I",[["^V"]]]]]],"~$collection-spec",["^ ","^@",null,"^A",["^ ","^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/collection.cljs","^C",86,"^D",7,"^E",86,"^F",22,"^H",["^I",["^J",["^I",[["^12","^13","^14","^15"]]]]],"^1<","A collection represents a collection of elements, each of which is itself\n   schematized.  At the top level, the collection has a precondition\n   (presumably on the overall type), a constructor for the collection from a\n   sequence of items, an element spec, and a function that constructs a\n   descriptive error on failure.\n\n   The element spec is a nested list structure, in which the leaf elements each\n   provide an element schema, parser (allowing for efficient processing of structured\n   collections), and optional error wrapper.  Each item in the list can be a leaf\n   element or an `optional` nested element spec (see below).  In addition, the final\n   element can be a `remaining` schema (see below).\n\n   Note that the `optional` carries no semantics with respect to validation;\n   the user must ensure that the parser enforces the desired semantics, which\n   should match the structure of the spec for proper generation."],"^5","~$schema.spec.collection/collection-spec","^O",false,"^B","file:/C:/Users/Matt/.m2/repository/prismatic/schema/1.1.1/schema-1.1.1.jar!/schema/spec/collection.cljs","^F",22,"^P",["^I",[["^12","^13","^14","^15"]]],"^Q",null,"^R",["^I",[null,null]],"^D",1,"^C",86,"^E",86,"^S",4,"^T",true,"^H",["^I",["^J",["^I",[["^12","^13","^14","^15"]]]]],"^1<","A collection represents a collection of elements, each of which is itself\n   schematized.  At the top level, the collection has a precondition\n   (presumably on the overall type), a constructor for the collection from a\n   sequence of items, an element spec, and a function that constructs a\n   descriptive error on failure.\n\n   The element spec is a nested list structure, in which the leaf elements each\n   provide an element schema, parser (allowing for efficient processing of structured\n   collections), and optional error wrapper.  Each item in the list can be a leaf\n   element or an `optional` nested element spec (see below).  In addition, the final\n   element can be a `remaining` schema (see below).\n\n   Note that the `optional` carries no semantics with respect to validation;\n   the user must ensure that the parser enforces the desired semantics, which\n   should match the structure of the spec for proper generation."]],"~:require-macros",["^ ","~$macros","~$schema.macros","^2<","^2<","^9","^:","^:","^:"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:schema","^15","~:return-walked?","~:schema.spec.collection/remaining","~:pre","^12","~:elements","~:schema.spec.collection/optional","~:parser","~:constructor","^14","~:on-error","^13"]],"~:order",["^2E","^2A","^2?","^2D","^2@","^2B","^2F","^2C","^2G","^12","^13","^14","^15"]],"^1<","A collection spec represents a collection of elements,\n   each of which is itself schematized."]