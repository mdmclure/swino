;; Analyzed by ClojureScript 1.8.40
{:use-macros nil, :excludes #{}, :name print.foo, :imports nil, :requires {str clojure.string, clojure.string clojure.string, pp cljs.pprint, cljs.pprint cljs.pprint}, :uses nil, :defs {get-miliseconds {:protocol-inline nil, :meta {:file "c:\\Users\\Matt\\swino\\resources\\public\\js\\print\\foo.cljc", :line 133, :column 7, :end-line 133, :end-column 22, :arglists (quote ([]))}, :name print.foo/get-miliseconds, :variadic false, :file "resources\\public\\js\\print\\foo.cljc", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, parse-list {:name print.foo/parse-list, :file "resources\\public\\js\\print\\foo.cljc", :line 64, :column 1, :end-line 64, :end-column 21, :meta {:file "c:\\Users\\Matt\\swino\\resources\\public\\js\\print\\foo.cljc", :line 64, :column 11, :end-line 64, :end-column 21}}, resolves-to-fn? {:protocol-inline nil, :meta {:file "c:\\Users\\Matt\\swino\\resources\\public\\js\\print\\foo.cljc", :line 50, :column 17, :end-line 50, :end-column 32, :private true, :arglists (quote ([x]))}, :private true, :name print.foo/resolves-to-fn?, :variadic false, :file "resources\\public\\js\\print\\foo.cljc", :end-column 32, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, tap {:name print.foo/tap, :file "resources\\public\\js\\print\\foo.cljc", :line 46, :column 1, :end-line 46, :end-column 9, :meta {:file "c:\\Users\\Matt\\swino\\resources\\public\\js\\print\\foo.cljc", :line 46, :column 6, :end-line 46, :end-column 9}, :doc "Quicker-to-type version of `print-and-return` with \" *** \" appended to the front"}, expand-arg {:protocol-inline nil, :meta {:file "c:\\Users\\Matt\\swino\\resources\\public\\js\\print\\foo.cljc", :line 32, :column 17, :end-line 32, :end-column 27, :private true, :arglists (quote ([arg]))}, :private true, :name print.foo/expand-arg, :variadic false, :file "resources\\public\\js\\print\\foo.cljc", :end-column 27, :method-params ([arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg]))}, interleave-middlewares {:protocol-inline nil, :meta {:file "c:\\Users\\Matt\\swino\\resources\\public\\js\\print\\foo.cljc", :line 162, :column 17, :end-line 162, :end-column 39, :private true, :arglists (quote ([handler middlewares {:keys [get-in timings?], :or {get-in [], timings? false}}]))}, :private true, :name print.foo/interleave-middlewares, :variadic false, :file "resources\\public\\js\\print\\foo.cljc", :end-column 39, :method-params ([handler middlewares p__32617]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 3, :fn-var true, :arglists (quote ([handler middlewares {:keys [get-in timings?], :or {get-in [], timings? false}}]))}, wrap-middleware-debugging {:protocol-inline nil, :meta {:file "c:\\Users\\Matt\\swino\\resources\\public\\js\\print\\foo.cljc", :line 137, :column 7, :end-line 137, :end-column 32, :arglists (quote ([handler middleware-name {:keys [get-in summarize? timings?], :or {get-in [], summarize? true, timings? false}}]))}, :name print.foo/wrap-middleware-debugging, :variadic false, :file "resources\\public\\js\\print\\foo.cljc", :end-column 32, :method-params ([handler middleware-name p__32544]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 3, :fn-var true, :arglists (quote ([handler middleware-name {:keys [get-in summarize? timings?], :or {get-in [], summarize? true, timings? false}}]))}, parse-item {:name print.foo/parse-item, :file "resources\\public\\js\\print\\foo.cljc", :line 54, :column 1, :end-line 54, :end-column 21, :meta {:file "c:\\Users\\Matt\\swino\\resources\\public\\js\\print\\foo.cljc", :line 54, :column 11, :end-line 54, :end-column 21}}, single-destructuring-arg->form+name {:protocol-inline nil, :meta {:file "c:\\Users\\Matt\\swino\\resources\\public\\js\\print\\foo.cljc", :line 10, :column 17, :end-line 10, :end-column 52, :private true, :arglists (quote ([arg-form])), :doc "Turns any one binding arg (which may be a destructuring binding) into a vector\n  where the left elem is the arg with a possible :as added to it.\n  And the rght side is the symbol referring to the arg itself."}, :private true, :name print.foo/single-destructuring-arg->form+name, :variadic false, :file "resources\\public\\js\\print\\foo.cljc", :end-column 52, :method-params ([arg-form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg-form])), :doc "Turns any one binding arg (which may be a destructuring binding) into a vector\n  where the left elem is the arg with a possible :as added to it.\n  And the rght side is the symbol referring to the arg itself."}, print-and-return {:protocol-inline nil, :meta {:file "c:\\Users\\Matt\\swino\\resources\\public\\js\\print\\foo.cljc", :line 37, :column 7, :end-line 37, :end-column 23, :arglists (quote ([& xs])), :doc "Diagnostic tool for printing the result of evaluating an s-expression.\n   Any initial args over 1, are printed as strings, and generally used as a label.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}}, :name print.foo/print-and-return, :variadic true, :file "resources\\public\\js\\print\\foo.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}, :method-params [(xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 0, :fn-var true, :arglists ([& xs]), :doc "Diagnostic tool for printing the result of evaluating an s-expression.\n   Any initial args over 1, are printed as strings, and generally used as a label."}}, :require-macros {pp cljs.pprint, cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{cond->> print.foo/print-cond->> print.foo/print-let print.foo/print-defn print.foo/print-cond-> symbol-for-destructured-arg print.foo/print-if :else cljs.core/-> :print.foo/timings :default :as let -> print.foo/print-defn- print.foo/print-> print.foo/print->> :summarize? :vector defn if :middleware-elapsed :sym :middleware cljs.core/cond print.foo/wrap-middleware-debugging cond-> :list defn- :middleware-timings cond :get-in quote :set :hierarchy print.foo/print-and-return :map :timings? ->>}, :order [symbol-for-destructured-arg :as :else :hierarchy :list :vector :set :map :sym :default print.foo/print-and-return quote -> print.foo/print-> ->> print.foo/print->> cond-> print.foo/print-cond-> cond->> print.foo/print-cond->> let print.foo/print-let if print.foo/print-if cond cljs.core/cond defn print.foo/print-defn defn- print.foo/print-defn- :get-in :summarize? :timings? :print.foo/timings :middleware :middleware-elapsed :middleware-timings print.foo/wrap-middleware-debugging cljs.core/->]}, :doc "Macros for printing diagnostic information while debugging or developing."}